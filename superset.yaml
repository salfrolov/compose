---
# Source: superset/templates/init-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: superset-init-db
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": "before-hook-creation"
spec:
  template:
    metadata:
      name: superset-init-db
    spec:
      initContainers:
      - command:
        - /bin/sh
        - -c
        - until nc -zv $KC_POSTGRESQL_SERVICE_HOST $KC_POSTGRESQL_SERVICE_PORT -w1; do echo 'waiting for db'; sleep 1; done
        envFrom:
        - secretRef:
            name: 'superset-env'
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        name: wait-for-postgres
      containers:
      - name: superset-init-db
        image: "192.168.249.3:5000/repository/docker/superset:1.2.0.53"
        imagePullPolicy: IfNotPresent
        envFrom:
          - secretRef:
              name: superset-env
        volumeMounts:
          - name: superset-config
            mountPath: "/app/pythonpath"
            readOnly: true
          - name: superset-config
            mountPath: "/app/docker/pythonpath"
            readOnly: true
        command: ["/bin/sh","-c",". /app/pythonpath/superset_init.sh"]
        resources:
          limits:
            cpu: 300m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 256Mi
      imagePullSecrets:
        - name: regcred
      volumes:
        - name: superset-config
          secret:
            secretName: superset-config
      restartPolicy: Never
---
# Source: superset/templates/secret-superset-config.yaml
apiVersion: v1
kind: Secret
metadata:
  name: superset-config
  labels:
    app: superset
    chart: superset-0.3.10
    release: "superset"
    heritage: "Helm"
type: Opaque
stringData:
  superset_config.py: |
    from flask_appbuilder.security.manager import AUTH_OID
    from keycloak_security_manager import OIDCSecurityManager
    import logging
    import os
    from typing import Optional
    from cachelib.file import FileSystemCache
    from celery.schedules import crontab
    import json
    
    logger = logging.getLogger()
    
    
    def get_env_variable(var_name: str, default: Optional[str] = None) -> str:
        """Get the environment variable or raise exception."""
        try:
            return os.environ[var_name]
        except KeyError:
            if default is not None:
                return default
            else:
                error_msg = "The environment variable {} was missing, abort...".format(
                    var_name
                )
                raise EnvironmentError(error_msg)
    
    
    DATABASE_DIALECT = get_env_variable("DATABASE_DIALECT")
    DATABASE_USER = get_env_variable("DATABASE_USER")
    DATABASE_PASSWORD = get_env_variable("DATABASE_PASSWORD")
    DATABASE_HOST = get_env_variable("KC_POSTGRESQL_SERVICE_HOST")
    DATABASE_PORT = get_env_variable("DATABASE_PORT")
    DATABASE_DB = get_env_variable("DATABASE_DB")
    
    # The SQLAlchemy connection string.
    SQLALCHEMY_DATABASE_URI = "%s://%s:%s@%s:%s/%s" % (
        DATABASE_DIALECT,
        DATABASE_USER,
        DATABASE_PASSWORD,
        DATABASE_HOST,
        DATABASE_PORT,
        DATABASE_DB,
    )
    
    REDIS_HOST = get_env_variable("REDIS_HOST")
    REDIS_PORT = get_env_variable("REDIS_PORT")
    REDIS_CELERY_DB = get_env_variable("REDIS_CELERY_DB", "0")
    REDIS_RESULTS_DB = get_env_variable("REDIS_RESULTS_DB", "1")
    
    RESULTS_BACKEND = FileSystemCache("/app/superset_home/sqllab")
    
    
    class CeleryConfig(object):
        BROKER_URL = f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_CELERY_DB}"
        CELERY_IMPORTS = ("superset.sql_lab",)
        CELERY_RESULT_BACKEND = f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_RESULTS_DB}"
        CELERYD_LOG_LEVEL = "DEBUG"
        CELERYD_PREFETCH_MULTIPLIER = 1
        CELERY_ACKS_LATE = False
        CELERYBEAT_SCHEDULE = {
            "reports.scheduler": {
                "task": "reports.scheduler",
                "schedule": crontab(minute="*", hour="*"),
            },
            "reports.prune_log": {
                "task": "reports.prune_log",
                "schedule": crontab(minute=10, hour=0),
            },
        }
    
    
    CELERY_CONFIG = CeleryConfig
    
    FEATURE_FLAGS = {"ALERT_REPORTS": True}
    ALERT_REPORTS_NOTIFICATION_DRY_RUN = True
    WEBDRIVER_BASEURL = "http://superset:8088/"
    # The base URL for the email report hyperlinks.
    WEBDRIVER_BASEURL_USER_FRIENDLY = WEBDRIVER_BASEURL
    
    SQLLAB_CTAS_NO_LIMIT = True
    
    #
    # Optionally import superset_config_docker.py (which will have been included on
    # the PYTHONPATH) in order to allow for local settings to be overridden
    #
    try:
        import superset_config_docker
        from superset_config_docker import *  # noqa
    
        logger.info(
            f"Loaded your Docker configuration at " f"[{superset_config_docker.__file__}]"
        )
    except ImportError:
        logger.info("Using default Docker config...")
    
    
    # Personalized configurations
    
    SECRET_KEY = get_env_variable("SECRET_KEY")
    
    # ---------------------------------------------------
    # Babel config for translations
    # ---------------------------------------------------
    # Setup default language
    BABEL_DEFAULT_LOCALE = get_env_variable('BABEL_DEFAULT_LOCALE')
    # Your application default translation path
    BABEL_DEFAULT_FOLDER = "superset/translations"
    # The allowed translation for you app
    LANGUAGES = {
        "en": {"flag": "us", "name": "English"},
        #"fr": {"flag": "fr", "name": "French"},
        #"pt_BR": {"flag": "br", "name": "Brazilian Portuguese"},
        # "es": {"flag": "es", "name": "Spanish"},
        # "it": {"flag": "it", "name": "Italian"},
        # "zh": {"flag": "cn", "name": "Chinese"},
        # "ja": {"flag": "jp", "name": "Japanese"},
        # "de": {"flag": "de", "name": "German"},
        # "pt": {"flag": "pt", "name": "Portuguese"},
        # "ru": {"flag": "ru", "name": "Russian"},
        # "ko": {"flag": "kr", "name": "Korean"},
        # "sl": {"flag": "si", "name": "Slovenian"},
    }
    
    PUBLIC_ROLE_LIKE = get_env_variable('PUBLIC_ROLE_LIKE')
    
    # OIDC config
    '''
    ---------------------------KEYCLOACK ----------------------------
    '''
    curr = os.path.abspath(os.getcwd())
    AUTH_TYPE = AUTH_OID
    OIDC_CLIENT_SECRETS = curr + '/docker/pythonpath/client_secret.json'
    OIDC_ID_TOKEN_COOKIE_SECURE = False
    OIDC_REQUIRE_VERIFIED_EMAIL = False
    OIDC_OPENID_REALM = get_env_variable('OIDC_OPENID_REALM')
    OIDC_INTROSPECTION_AUTH_METHOD = 'client_secret_post'
    CUSTOM_SECURITY_MANAGER = OIDCSecurityManager
    AUTH_USER_REGISTRATION = True
    AUTH_USER_REGISTRATION_ROLE = 'Gamma'
    '''
    --------------------------------------------------------------
    '''
    APP_NAME = get_env_variable('APP_NAME')
    # Jinja template processing option
    ENABLE_TEMPLATE_PROCESSING = json.loads(get_env_variable('ENABLE_TEMPLATE_PROCESSING', 'False').lower())
  superset_init.sh: |
    #!/bin/sh
    set -eu
    echo "Upgrading DB schema..."
    superset db upgrade
    echo "Initializing roles..."
    superset init
    
    echo "Creating admin user..."
    superset fab create-admin \
                    --username admin \
                    --firstname Superset \
                    --lastname Admin \
                    --email admin@superset.com \
                    --password admin \
                    || true
    
    if [ -f "/import_datasources.yaml" ]; then
      echo "Importing database connections.... "
      superset import_datasources -p /import_datasources.yaml
    fi
  client_secret.json: |
    {
      "web": {
        "issuer": "http://172.29.0.6:30080/realms/superset",
        "auth_uri": "http://172.29.0.6:30080/realms/superset/protocol/openid-connect/auth",
        "client_id": "superset",
        "client_secret": "QBav9oJV65idXH7kqTWre6Klf6FLnrLF",
        "redirect_uris": [
          "http://*"
        ],
        "userinfo_uri": "http://172.29.0.6:30080/realms/superset/protocol/openid-connect/userinfo",
        "token_uri": "http://172.29.0.6:30080/realms/superset/protocol/openid-connect/token",
        "token_introspection_uri": "http://172.29.0.6:30080/realms/superset/protocol/openid-connect/token/introspect"
      }
    }
    
  keycloak_security_manager.py: |
    from flask_appbuilder.security.manager import AUTH_OID
    from superset.security import SupersetSecurityManager
    from flask_oidc import OpenIDConnect
    from flask_appbuilder.security.views import AuthOIDView
    from flask_login import login_user
    from urllib.parse import quote
    from flask_appbuilder.views import expose
    from flask import request, redirect
    
    
    class OIDCSecurityManager(SupersetSecurityManager):
    
        def __init__(self, appbuilder):
            super(OIDCSecurityManager, self).__init__(appbuilder)
            if self.auth_type == AUTH_OID:
                self.oid = OpenIDConnect(self.appbuilder.get_app)
            self.authoidview = AuthOIDCView
    
    
    class AuthOIDCView(AuthOIDView):
    
        @expose('/login/', methods=['GET', 'POST'])
        def login(self, flag=True):
            sm = self.appbuilder.sm
            oidc = sm.oid
            superset_roles = ["Admin", "Alpha", "Gamma", "Public", "granter", "sql_lab"]
            default_role = "Gamma"
    
            @self.appbuilder.sm.oid.require_login
            def handle_login():
                user = sm.auth_user_oid(oidc.user_getfield('email'))
    
                if user is None:
                    info = oidc.user_getinfo(['preferred_username', 'given_name', 'family_name', 'email', 'roles'])
                    roles = [role for role in superset_roles if role in info.get('roles', [])]
                    roles += [default_role, ] if not roles else []
                    user = sm.add_user(info.get('preferred_username'), info.get('given_name', ''), info.get('family_name', ''),
                                       info.get('email'), [sm.find_role(role) for role in roles])
    
                login_user(user, remember=False)
                return redirect(self.appbuilder.get_url_for_index)
    
            return handle_login()
    
        @expose('/logout/', methods=['GET', 'POST'])
        def logout(self):
            oidc = self.appbuilder.sm.oid
    
            oidc.logout()
            super(AuthOIDCView, self).logout()
            redirect_url = request.url_root.strip('/')
            # redirect_url = request.url_root.strip('/') + self.appbuilder.get_url_for_login
    
            return redirect(
                oidc.client_secrets.get('issuer') + '/protocol/openid-connect/logout?redirect_uri=' + quote(redirect_url))

---
# Source: superset/templates/secret-superset-env.yaml
apiVersion: v1
kind: Secret
metadata:
  name: superset-env
  labels:
    app: superset
    chart: superset-0.3.10
    release: "superset"
    heritage: "Helm"
type: Opaque
stringData:
    REDIS_HOST: "superset-redis"
    DB_HOST: "192.168.249.3"
    DB_NAME: "sdp"
    DB_PASS: "9ae32a34"
    DB_PORT: "5432"
    DB_USER: "sdp"
    REDIS_DB: "0"
    REDIS_PASSWORD: "REDIS_PASSWORD"
    REDIS_PORT: "6379"
    SECRET_KEY: "SECRET_KEY"
    SQLALCHEMY_POSTGRESQL_SCHEMA: "public"
    SECRET_KEY: "VExbJKdM4NtS1zDS39zyrMz7Y6e5pcYYd1efHHqQbaybyR0Oa/kMmf6N"
    BABEL_DEFAULT_LOCALE: "en"
    PUBLIC_ROLE_LIKE: "Gamma"
    
    # database configurations
    DATABASE_DB: "airflow"
    #DATABASE_HOST: "$(KC_POSTGRESQL_SERVICE_HOST)"
    DATABASE_PASSWORD: "airflow"
    DATABASE_USER: "postgres"
    
    # database engine specific environment variables
    # change the below if you prefers another database engine
    DATABASE_PORT: "5432"
    DATABASE_DIALECT: "postgresql"
    
    # Add the mapped in /app/pythonpath_docker which allows devs to override stuff
    PYTHONPATH: "/app/pythonpath:/app/docker/pythonpath"
    #PYTHONPATH: "/app/pythonpath:/app/pythonpath"
    REDIS_HOST: "redis"
    REDIS_PORT: "6379"
    
    # FLASK_ENV: development
    # SUPERSET_ENV: development
    # FLASK_ENV: production
    # SUPERSET_ENV: production
    SUPERSET_LOAD_EXAMPLES: "yes"
    CYPRESS_CONFIG: "false"
    SUPERSET_PORT: "8088"
    HOST_PORT: "8088"
    
    # keycloak
    OIDC_OPENID_REALM: "superset"
    
    # set app name
    APP_NAME: "Superset"
    # jinja template proccessing option
    ENABLE_TEMPLATE_PROCESSING: "False"
---
# Source: superset/templates/service-superset.yaml
apiVersion: v1
kind: Service
metadata:
  name: superset-service
  labels:
    app: superset-service
    chart: superset-0.3.10
    release: superset
    heritage: Helm
spec:
  type: NodePort
  ports:
    - port: 8088
      nodePort: 30088
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: superset
    release: superset
---
# Source: superset/templates/deployment-superset.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset
  labels:
    app: superset
    chart: superset-0.3.10
    release: superset
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: superset
      release: superset
  template:
    metadata:
      annotations:
        # Force reload on config changes
        checksum/superset_config.py: e1d4b9eaead9fed23ad351a12f40b55a5df9f2b2d2519195b504e208f74b52d6
        checksum/superset_init.sh: 74cd948ca57974ed689be5565a5d5d4e10795a82387913c46aee65d29590678c
        checksum/connections: a39076c351ff5061e19388dbd5166f521ebd38ca7ada88e9a026dbf79c0d8d60
      labels:
        app: superset
        release: superset
    spec:
      initContainers:
      - command:
        - /bin/sh
        - -c
        - until nc -zv $KC_POSTGRESQL_SERVICE_HOST $KC_POSTGRESQL_SERVICE_PORT -w1; do echo 'waiting for db'; sleep 1; done
        envFrom:
        - secretRef:
            name: 'superset-env'
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        name: wait-for-postgres
      containers:
        - name: superset
          image: "192.168.249.3:5000/repository/docker/superset:1.2.0.53"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh","-c",". /opt/app-root/bin/docker-entrypoint.sh"]
          env:
            - name: "SUPERSET_PORT"
              value: "8088"
            - name: "GUNICORN_TIMEOUT"
              value: "300"
          envFrom:
            - secretRef:
                name: "superset-env"
          volumeMounts:
            - name: superset-config
              mountPath: "/app/pythonpath"
              readOnly: true
            - name: superset-config
              mountPath: "/app/docker/pythonpath"
              readOnly: true
          ports:
            - name: http
              containerPort: 8088
              protocol: TCP
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 1000m
              memory: 1Gi
      imagePullSecrets:
        - name: regcred
      volumes:
        - name: superset-config
          secret:
            secretName: superset-config
        #
---
# Source: superset/templates/deployment-worker.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset-worker
  labels:
    app: superset-worker
    chart: superset-0.3.10
    release: superset
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: superset-worker
      release: superset
  template:
    metadata:
      annotations:
        checksum/superset_config.py: e1d4b9eaead9fed23ad351a12f40b55a5df9f2b2d2519195b504e208f74b52d6
        checksum/connections: a39076c351ff5061e19388dbd5166f521ebd38ca7ada88e9a026dbf79c0d8d60
        
      labels:
        app: superset-worker
        release: superset
    spec:
      initContainers:
      - command:
        - /bin/sh
        - -c
        - until nc -zv $KC_POSTGRESQL_SERVICE_HOST $KC_POSTGRESQL_SERVICE_PORT -w1; do echo 'waiting for db'; sleep 1; done
        envFrom:
        - secretRef:
            name: 'superset-env'
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        name: wait-for-postgres
      containers:
        - name: superset
          image: "192.168.249.3:5000/repository/docker/superset:1.2.0.53"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh","-c","celery --app=superset.tasks.celery_app:app worker"]
          env:
            - name: "SUPERSET_PORT"
              value: "8088"
          envFrom:
            - secretRef:
                name: "superset-env"
          volumeMounts:
            - name: superset-config
              mountPath: "/app/pythonpath"
              readOnly: true
            - name: superset-config
              mountPath: "/app/docker/pythonpath"
              readOnly: true
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 1000m
              memory: 1Gi
      imagePullSecrets:
        - name: regcred
      volumes:
        - name: superset-config
          secret:
            secretName: superset-config
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: superset-ingress
  labels:
    app: superset
    chart: superset-0.3.10
    release: superset
    heritage: Helm
spec:
  rules:
    - host: "superset-example.test"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: superset-service
                port:
                  number: 8088